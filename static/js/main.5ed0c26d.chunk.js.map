{"version":3,"sources":["redax/selectors.ts","components/News/News.module.css","components/common/preloader/preloader.module.css","assets/images/users.png","api/users-api.ts","redax/users-reducer.ts","components/Music/Music.module.css","components/Settings/Settings.module.css","components/Content/Content.module.css","components/Content/MyPosts/MyPosts.module.css","components/Content/MyPosts/Post/Post.module.css","api/api.ts","reportWebVitals.js","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/common/FormsControl/FormsControl.tsx","utils/validators/validator.ts","components/Dialogs/Dialogs.tsx","redax/messagePage-reducer.ts","components/hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","redax/news-reducer.js","components/News/News.jsx","components/News/conteinerNews.js","components/Music/Music.jsx","api/auth-api.ts","api/security-api.ts","redax/auth-reducer.ts","components/Login/Login.tsx","redax/settingPage-reducer.js","components/Settings/Settings.jsx","api/profile-api.ts","redax/contentPage-reducer.ts","components/Content/MyPosts/Post/Post.tsx","components/Content/MyPosts/Myposts.tsx","components/Content/MyPosts/MypostsContainer.tsx","components/Content/ProfileInfo/ProfileStatus.tsx","components/Content/ProfileInfo/ProfileDataForm.tsx","components/Content/ProfileInfo/ProfileInfo.tsx","components/Content/Content.tsx","components/Content/ProfileContainer.tsx","redax/app-reducer.ts","components/hoc/withSuspense.tsx","components/Header/Header.tsx","App.tsx","redax/bestFriends-reducer.js","redax/redux-store.ts","index.js","components/common/FormsControl/formsControl.module.css","components/Dialogs/Dialogs.module.css","components/common/preloader/preloader.tsx","components/Content/ProfileInfo/ProfileInfo.module.css"],"names":["getUsers","createSelector","state","usersPage","users","filter","u","getCurrentPage","currentPage","getPageSize","pageSize","getTotalUser","usersTotalCount","getIsFetching","isFetching","getfollowingProgress","followingProgress","getUsersFilter","getIsAuth","auth","isAuth","getLogin","login","module","exports","usersAPI","term","friend","instance","get","then","response","data","id","delete","res","post","initialState","actionsUsers","userId","type","pageNumber","totalUser","payload","getUsersThunk","dispatch","a","items","totalCount","onPageChengeThunk","followThunk","resultCode","unfollowThunk","userPageReducer","action","map","followed","ResultCodeEnum","ResultCodeForCaptchaEnum","axios","create","withCredentials","baseURL","headers","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","DialogItem","props","path","className","classes","dialog","src","dialogAvaLink","alt","to","name","Message","message","Textarea","input","meta","hasError","error","touched","formControl","Input","required","value","maxLengthCreator","maxLength","length","maxLength50","DialogReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","validate","Dialogs","dialogsElements","messagesPage","dialogData","element","messagesElements","messagesData","dialogs","dialogItems","messagesBlock","formData","addMessageActionCreater","messageValue","ADD_MESSAGE","chengeMessage","messagePageReducer","mapStateToProps","withAuthRedirect","Component","connect","restProps","DialogsContainer","compose","REPOST","UNREPOST","news","repost","author","title","body","image","repostAC","unrepostAC","newsPageReducer","News","newsElem","n","clear","ContainerNews","newsPage","unrepost","MusicReduxForm","Music","music","console","log","authAPI","email","password","rememberMe","captcha","securityAPI","SET_USER_DATA","SET_LOGIN_USER_ID","SET_CAPTCHA_URL","captchaURL","actions","authUserDataThunk","meData","Succes","getcaptchaURLThunk","url","authReducer","LoginReduxForm","errorLogin","Login","useSelector","useDispatch","CaptchaIsRequired","messages","stopSubmit","_error","loginUserThunk","SET_CHOISE_SUMM","choiseSumm","settingReducer","summ","setting","setSummAC","useState","currentValue","onChengeCurrentValue","settings","min","max","onChange","e","currentTarget","onClick","profileAPI","UserId","status","put","photoFile","FormData","append","postsData","likeNumb","avaLink","userProfile","postMessage","photos","getUserProfileThunk","contentPageReducer","newPost","p","postId","Post","avalink","likenumb","maxLength30","PostReduxForm","MyPosts","postsElem","contentPage","posts","addPostAction","MypostsContainer","ProfileStatus","editMode","setEditMode","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatusThunk","ProfileDataReduxForm","style","Object","keys","profile","contacts","key","Contact","contactTitle","contactValue","ProfileData","isOwner","goToEditMode","aboutMe","lookingForAJob","lookingForAJobDescription","ProfileInfo","avatar","large","userPhotoDefault","fullName","target","files","savePhotoThunk","setFormDataThunk","Content","content","ProfileContainer","this","match","params","authorizedUserId","history","push","getStatusThunk","refreshProfile","prevProps","prevState","React","ProfileContainerConnect","photo","getState","Promise","reject","withRouter","INITIALIZED_SUCCESS","inizialized","appReducer","withSuspense","WrappedComponent","Suspense","fallback","Header","Layout","collapsed","setCollapsed","padding","span","createElement","MenuUnfoldOutlined","MenuFoldOutlined","fontSize","color","marginLeft","toggle","backgroundColor","icon","UserOutlined","margin","Sider","UsersPage","lazy","ChatPage","SuspendedDialogs","SuspendedChat","App","setState","initializeAppThunk","initialized","trigger","collapsible","collapsedWidth","theme","mode","defaultSelectedKeys","Item","MessageOutlined","TeamOutlined","minHeight","exact","render","app","bestFriends","bestFriendsReducer","reducers","combineReducers","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","rerenderEntireTree","ReactDOM","basename","process","document","getElementById","subscribe","Preloader","wrapperSpin","ldsRipple"],"mappings":"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","file":"static/js/main.5ed0c26d.chunk.js","sourcesContent":["import { AppStateType } from './redux-store';\r\nimport {createSelector} from 'reselect'\r\n  \r\n  \r\n\r\n\r\n\r\nconst getAllUsers = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}    \r\n\r\n\r\nexport const getUsers = createSelector(getAllUsers, (users) => {\r\n    return users.filter( u => true)\r\n})\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\n\r\nexport const getTotalUser = (state: AppStateType) => {\r\n    return state.usersPage.usersTotalCount\r\n}\r\n\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\n\r\nexport const getfollowingProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingProgress\r\n}\r\n\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter\r\n}\r\n\r\nexport const getIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth\r\n}  \r\n\r\nexport const getLogin = (state: AppStateType) => {\r\n    return state.auth.login\r\n} \r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"news\":\"News_news__16vR8\",\"clear\":\"News_clear__29u6V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperSpin\":\"preloader_wrapperSpin__QsBk-\",\"ldsRipple\":\"preloader_ldsRipple__1xFyQ\",\"lds-ripple\":\"preloader_lds-ripple__1l7Y-\"};","export default __webpack_public_path__ + \"static/media/users.11231a30.png\";","import { userType } from '../Types/types'\r\nimport {instance, ResponseType} from './api'\r\n\r\n\r\ntype GetUsersType = {\r\n    items: Array <userType>\r\n    totalCount: number\r\n    error: null | string\r\n}\r\n\r\n\r\nexport const usersAPI = {\r\n    \r\n    getUsers(currentPage = 1, pageSize = 3, term: string = '', friend: null | boolean = null) {\r\n        return instance.get<GetUsersType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '': `&friend=${friend}`))\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n    },\r\n\r\n    unfollowUser(id: number) {\r\n        return instance.delete<ResponseType>(`follow/${id}`).then(res => res.data)\r\n    },\r\n\r\n    followUser(id: number) {\r\n        return instance.post<ResponseType>(`follow/${id}`).then(res => res.data)\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { usersAPI } from '../api/users-api';\r\nimport { userType } from '../Types/types';\r\nimport {  BaseThunkType, InferActionsTypes } from './redux-store';\r\n\r\n\r\nlet initialState = {\r\n  users: [] as Array<userType>,\r\n  currentPage: 1 as number,\r\n  pageSize: 4 as number,\r\n  usersTotalCount: 0 as number,\r\n  isFetching: false as boolean,\r\n  followingProgress: [] as Array<number>,\r\n  filter: {\r\n    term: \"\",\r\n    friend: null as null | boolean\r\n  } //array usersId\r\n}\r\n\r\ntype initialStateType = typeof initialState\r\n\r\nconst userPageReducer = (state = initialState, action: ActionTypes): initialStateType => {\r\n  switch (action.type) {\r\n    case 'USERS/FOLLOW':\r\n      return {\r\n        ...state,\r\n        users: state.users.map(u => {\r\n          if (u.id === action.userId) {\r\n            return {\r\n              ...u,\r\n              followed: true\r\n            }\r\n          }\r\n          return u;\r\n        })\r\n      }\r\n    case 'USERS/UNFOLLOW':\r\n      return {\r\n        ...state,\r\n        users: state.users.map(u => {\r\n          if (u.id === action.userId) {\r\n            return {\r\n              ...u,\r\n              followed: false\r\n            }\r\n          }\r\n          return u;\r\n        })\r\n      }\r\n    case 'USERS/SET_USERS': {\r\n      return {\r\n        ...state,\r\n        users: action.users\r\n      }\r\n    }\r\n    case 'USERS/SET_CURRENT_PAGE': {\r\n      return {\r\n        ...state,\r\n        currentPage: action.pageNumber\r\n      }\r\n    }\r\n    case 'USERS/SET_USER_TOTAL_COUNT': {\r\n      return {\r\n        ...state,\r\n        usersTotalCount: action.totalUser\r\n      }\r\n    }\r\n    case 'USERS/TOGGLE_IS_FETCHING': {\r\n      return {\r\n        ...state,\r\n        isFetching: action.isFetching\r\n      }\r\n    }\r\n    case 'USERS/TOGGLE_IS_FOLLOWING_PROGRESS': {\r\n      return {\r\n        ...state,\r\n        followingProgress: action.followingProgress\r\n          ? [...state.followingProgress, action.userId]\r\n          : state.followingProgress.filter(id => id !== action.userId)\r\n      }\r\n    }\r\n\r\n    case 'USERS/SET_FILTER': {\r\n      return {\r\n        ...state,\r\n        filter: action.payload\r\n      }\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n\r\nexport const actionsUsers = {\r\n  follow: (userId: number) => {\r\n    return ({\r\n      type: 'USERS/FOLLOW',\r\n      userId\r\n    } as const)\r\n  },\r\n\r\n  unfollow: (userId: number) => {\r\n    return ({\r\n      type: 'USERS/UNFOLLOW',\r\n      userId\r\n    }as const)\r\n  },\r\n\r\n  setUsers: (users: Array<userType>) => {\r\n    return ({\r\n      type: 'USERS/SET_USERS',\r\n      users\r\n    }as const)\r\n  },\r\n\r\n  setCurrentPage: (pageNumber: number) => {\r\n    return ({\r\n      type: 'USERS/SET_CURRENT_PAGE',\r\n      pageNumber\r\n    }as const)\r\n  },\r\n\r\n  userTotalCount: (totalUser: number) => {\r\n    return ({\r\n      type: 'USERS/SET_USER_TOTAL_COUNT',\r\n      totalUser\r\n    }as const)\r\n  },\r\n\r\n  setIsFetching: (isFetching: boolean) => {\r\n    return ({\r\n      type: 'USERS/TOGGLE_IS_FETCHING',\r\n      isFetching\r\n    }as const)\r\n  },\r\n\r\n  setFollowingProgress: (followingProgress: boolean, userId: number) => {\r\n    return ({\r\n      type: 'USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n      followingProgress,\r\n      userId\r\n    }as const)\r\n  },\r\n  setFilter: (filter: FilterType) => {\r\n    return ({\r\n      type: 'USERS/SET_FILTER',\r\n      payload: filter\r\n    }as const)\r\n  }\r\n}\r\n\r\n\r\ntype ActionTypes = InferActionsTypes<typeof actionsUsers>\r\ntype ThunkType = BaseThunkType<ActionTypes>\r\nexport type FilterType = typeof initialState.filter\r\n\r\nexport const getUsersThunk = (currentPage: number,\r\n  pageSize: number, filter: FilterType): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(actionsUsers.setIsFetching(true))\r\n    dispatch(actionsUsers.setFilter(filter))\r\n    let response = await usersAPI.getUsers(currentPage, pageSize, filter.term, filter.friend)\r\n    dispatch(actionsUsers.setIsFetching(false))\r\n    dispatch(actionsUsers.setUsers(response.items))\r\n    dispatch(actionsUsers.userTotalCount(response.totalCount))\r\n    \r\n  }\r\n}\r\n\r\nexport const onPageChengeThunk = (pageNumber: number, pageSize: number, filter: FilterType): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(actionsUsers.setCurrentPage(pageNumber));\r\n    dispatch(actionsUsers.setIsFetching(true))\r\n    dispatch(actionsUsers.setFilter(filter))\r\n    let response = await usersAPI.getUsers(pageNumber, pageSize, filter.term, filter.friend)\r\n    dispatch(actionsUsers.setIsFetching(false))\r\n    dispatch(actionsUsers.setUsers(response.items))\r\n  }\r\n}\r\n\r\nexport const followThunk = (userId: number): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(actionsUsers.setFollowingProgress(true, userId))\r\n    let data = await usersAPI.followUser(userId)\r\n    if (data.resultCode === 0) {\r\n      dispatch(actionsUsers.follow(userId))\r\n    }\r\n    dispatch(actionsUsers.setFollowingProgress(false, userId))\r\n  }\r\n}\r\n\r\nexport const unfollowThunk = (userId: number): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(actionsUsers.setFollowingProgress(true, userId))\r\n    let data = await usersAPI.unfollowUser(userId)\r\n    if (data.resultCode === 0) {\r\n      dispatch(actionsUsers.unfollow(userId))\r\n    }\r\n    dispatch(actionsUsers.setFollowingProgress(false, userId))\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default userPageReducer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"music\":\"Music_music__240Pk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"Settings_settings__d9j1V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Content_content__27TYr\",\"avatar\":\"Content_avatar__1eH8z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__y6SLq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__3UzhK\",\"item\":\"Post_item__2v9Uw\"};","import axios from 'axios'\r\n\r\n\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': 'c3824144-a684-4fa7-836c-9c70cb84d6fb'\r\n    }\r\n})\r\n\r\nexport enum ResultCodeEnum {\r\n    Succes = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type ResponseType<D = {}, RC = ResultCodeEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport classes from './../Dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n  id: number\r\n  name: string\r\n  dialogAvaLink: string\r\n}\r\n\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n  let path = \"/dialogs/\"+ props.id\r\n  return (\r\n    <div className={classes.dialog}>\r\n      <img src={props.dialogAvaLink} alt='ava'/>\r\n      <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default DialogItem","import React from 'react';\r\nimport classes from './../Dialogs.module.css';\r\n\r\ntype MessagePropsType = {\r\n  message: string\r\n}\r\n\r\nconst Message: React.FC<MessagePropsType> = (props) => {\r\n  return (\r\n  <div className={classes.message}>{props.message}</div>\r\n  )\r\n}\r\n \r\n\r\n\r\nexport default Message","import React from 'react';\r\nimport { WrappedFieldProps } from 'redux-form';\r\nimport classes from './formsControl.module.css'\r\n\r\n\r\n\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = ({input, meta, ...props}) =>{\r\n    const hasError = meta.error && meta.touched; \r\n    return (\r\n        <div className={classes.formControl + ' ' + (hasError ? classes.error : '')}>\r\n            <div>\r\n                <textarea {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\n\r\nexport const Input: React.FC<WrappedFieldProps>  = ({input, meta, ...props}) =>{\r\n    const hasError = meta.error && meta.touched; \r\n    return (\r\n        <div className={classes.formControl + ' ' + (hasError ? classes.error : '')}>\r\n            <div>\r\n                <input {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n        \r\n    )\r\n}","\r\nexport type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = value=> {\r\n    if (value) {\r\n        return undefined\r\n    }\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => value => {\r\n    if(value && value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","import React from 'react';\r\nimport classes from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport {Textarea} from '../common/FormsControl/FormsControl'\r\nimport { required, maxLengthCreator } from '../../utils/validators/validator';\r\nimport {InitialMessagesStateType} from './../../redax/messagePage-reducer'\r\n\r\ntype OwnPropsType = {\r\n  messagesPage: InitialMessagesStateType\r\n  addMessageActionCreater: (messageValue: string) => void\r\n}\r\n\r\nexport type NewMessageFormType = {\r\n  messageValue: string\r\n}\r\n\r\nconst Dialogs: React.FC<OwnPropsType> = (props) => {\r\n\r\n  let dialogsElements = props.messagesPage.dialogData.map((element) => {\r\n    return (\r\n      <DialogItem name={element.name} key={element.id} id={element.id} dialogAvaLink={element.dialogAvaLink} />\r\n    );\r\n  });\r\n\r\n\r\n  let messagesElements = props.messagesPage.messagesData.map(message => <Message message={message.message} />);\r\n\r\n\r\n\r\n  const onSubmit = (formData: NewMessageFormType) => {\r\n    props.addMessageActionCreater(formData.messageValue);\r\n  } \r\n\r\n  return (\r\n    <div className={classes.dialogs}>\r\n        <div className={classes.dialogItems}>\r\n          {dialogsElements}\r\n        </div>\r\n        <div className={classes.messagesBlock}>\r\n          {messagesElements}\r\n        </div>\r\n        <DialogReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n  )\r\n}\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\ntype MessageFormOwnPropsType = {}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormType, MessageFormOwnPropsType> & MessageFormOwnPropsType> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n          <Field placeholder={'Message'} name={'messageValue'} component={Textarea} validate={[required, maxLength50]}/>\r\n        </div>\r\n        <button>add message</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst DialogReduxForm = reduxForm<NewMessageFormType, MessageFormOwnPropsType> ({\r\n  form: 'dialogs'\r\n}) (AddMessageForm)\r\n\r\n\r\n\r\nexport default Dialogs","const ADD_MESSAGE = 'ADD-MESSAGE';\r\n\r\n\r\ntype dialogsType = {\r\n  id: number\r\n  name: string\r\n  dialogAvaLink: string\r\n}\r\n\r\ntype messagesType = {\r\n  id: number\r\n  message: string\r\n}\r\n\r\nlet initialState = {\r\n  dialogData:[\r\n    {id: 1, name: 'Dimych', dialogAvaLink:'https://i.pinimg.com/236x/54/13/e2/5413e250d1eecb821fc49c3213d7d661--search.jpg'},\r\n    {id: 2, name: 'Masha', dialogAvaLink:'https://bipbap.ru/wp-content/uploads/2018/02/1378847521_1806552374.jpg'},\r\n    {id: 3, name: 'Sveta', dialogAvaLink:'https://sun9-17.userapi.com/impf/4WuzlR38g8VZ7SDAE26PZMvN8ymWBgFKfvnJcg/mh2Zr1zacro.jpg?size=200x0&quality=90&crop=22,0,560,580&sign=ce0a6e9cd38861cbf30a89d01eb50ce1&ava=1'},\r\n    {id: 4, name: 'Saha', dialogAvaLink:'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSCo1Qx_f-i5jibEv8Aa7D5lOYSClFPsq6b8g&usqp=CAU'},\r\n    {id: 5, name: 'Vadim', dialogAvaLink:'https://sun9-58.userapi.com/impf/c627624/v627624661/2fe3/b_qSlC2kZIo.jpg?size=200x0&quality=90&crop=0,0,501,604&sign=f020e3d674d8d1299729deee44221885&ava=1'}] as Array <dialogsType>,\r\n\r\n  messagesData: [\r\n    {id: 1, message: 'Hi'},\r\n    {id: 2, message: 'How are you?'},\r\n    {id: 3, message: 'What the fuck?'}] as Array <messagesType>,\r\n\r\n    chengeMessage: '' as string\r\n}\r\n\r\nexport type InitialMessagesStateType = typeof initialState\r\n\r\nconst messagePageReducer = (state = initialState, action: ActionsType) : InitialMessagesStateType => {\r\n  switch(action.type) {\r\n    case ADD_MESSAGE: \r\n      return {\r\n        ...state,\r\n        chengeMessage: '',\r\n        messagesData: [...state.messagesData, \r\n          {id: state.messagesData.length + 1,\r\n          message: action.message} ]\r\n      };\r\n      \r\n    default:\r\n      return state; \r\n  }\r\n}\r\n\r\n\r\ntype addMessageActionType = {\r\n  type: typeof ADD_MESSAGE \r\n  message: string\r\n}\r\n\r\ntype ActionsType = addMessageActionType\r\n\r\nexport const addMessageActionCreater = (messageValue: string): addMessageActionType => {\r\n    return(\r\n      {type: ADD_MESSAGE, message: messageValue}\r\n    )\r\n   }\r\n  \r\n\r\n\r\nexport default messagePageReducer","import { Redirect } from \"react-router-dom\"\r\nimport React from 'react'\r\nimport { connect } from \"react-redux\"\r\nimport { AppStateType } from \"../../redax/redux-store\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\nexport function withAuthRedirect <WCP> (Component: React.ComponentType<WCP>) {\r\n   const RedirectComponent: React.FC<MapPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n            if (!isAuth) return <Redirect to='/login'/>\r\n            return <Component {...restProps as WCP}/>\r\n  \r\n    }\r\n    \r\n    let ConnectedAuthRedirectComponent = connect (mapStateToProps)(RedirectComponent)    \r\n    return ConnectedAuthRedirectComponent\r\n}","\r\nimport Dialogs from './Dialogs'\r\nimport {addMessageActionCreater} from '../../redax/messagePage-reducer'\r\nimport { connect } from 'react-redux'\r\nimport { withAuthRedirect } from '../hoc/withAuthRedirect'\r\nimport { compose } from 'redux'\r\nimport { AppStateType } from '../../redax/redux-store'\r\n \r\n\r\nconst mapStateToProps = (state: AppStateType) =>{\r\n  return{\r\n    messagesPage: state.messagesPage,\r\n  }\r\n}\r\n\r\n\r\nconst DialogsContainer = compose<React.ComponentType>(\r\n  connect(mapStateToProps, {addMessageActionCreater}),\r\n  withAuthRedirect\r\n)(Dialogs)\r\n\r\n\r\nexport default DialogsContainer","const REPOST = 'REPOST';\r\nconst UNREPOST = 'UNREPOST';\r\n\r\n\r\nlet initialState = {\r\n  news: [\r\n    {id:1, repost: true, author: 'Степан Путило', title: 'Жыве Беларусь!', body:'Патриотический лозунг-девиз, направленный на пробуждение национально-гражданских чувств, консолидацию народа Белоруссии на защиту свободы, независимости своей страны, родного языка, всей национальной культуры.', image: 'https://pbs.twimg.com/profile_images/637374236/305341222_400x400.jpg'},\r\n    {id:2, repost:false, author: 'Виктор Бабарико', title: 'Победа близко!', body:'Белорусский банкир, общественный и политический деятель, в 2020 году выдвигавший свою кандидатуру на пост президента Республики Беларусь, политический заключённый, меценат. Задержан 18 июня 2020.', image: 'https://pbs.twimg.com/profile_images/1293684186470125568/_bp0VdeG_400x400.jpg'},\r\n  ]\r\n  \r\n}\r\n\r\nconst newsPageReducer = (state = initialState, action) => {\r\n  switch(action.type) {\r\n    case REPOST: \r\n        return {\r\n          ...state,\r\n          news: state.news.map( u => {\r\n            if (u.id === action.userId) {\r\n              return {...u, repost: true}\r\n            }\r\n            return u;\r\n          })\r\n        }\r\n     case UNREPOST:\r\n      return {\r\n        ...state,\r\n        news: state.news.map( u => {\r\n          if (u.id === action.userId) {\r\n            return {...u, repost: false}\r\n          }\r\n          return u;\r\n        })\r\n      }\r\n     default:\r\n        return state;    \r\n  }\r\n}\r\nexport const repostAC = (userId) => {\r\n  return(\r\n    {type: REPOST, userId}\r\n  )\r\n} \r\nexport const unrepostAC = (userId) =>{\r\n  return(\r\n    {type: UNREPOST, userId}\r\n  )\r\n}\r\n\r\n\r\nexport default newsPageReducer","import React from 'react';\r\nimport classes from './News.module.css';\r\n\r\n\r\n\r\nconst News = (props) => {\r\n\r\n  let newsElem = props.news.map( n => {\r\n    return (\r\n      <div className={classes.news} key={n.id}>\r\n        <img src={n.image} alt=\"newsimg\"/>\r\n        <h3>{n.title}</h3>\r\n        <div>{n.body}</div>\r\n        <div className={classes.clear}></div>\r\n        <div>{n.author}</div>\r\n      </div>\r\n    )\r\n  })\r\n    return (\r\n      <div>\r\n        { newsElem }\r\n      </div>\r\n     \r\n    )\r\n}\r\n\r\nexport default News","import { connect } from 'react-redux'\r\nimport { repostAC, unrepostAC } from '../../redax/news-reducer'\r\nimport News from './News'\r\n\r\nconst mapStateToProps = (state) =>{\r\n  return {\r\n    news: state.newsPage.news\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n  return {\r\n    repost: () =>{\r\n      dispatch(repostAC)\r\n    } ,\r\n    unrepost: () => {\r\n      dispatch(unrepostAC)\r\n    }\r\n  }\r\n}\r\n\r\n\r\nconst ContainerNews = connect(mapStateToProps, mapDispatchToProps) (News)\r\nexport default ContainerNews","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport classes from './Music.module.css';\r\n\r\n\r\nconst Music = (props) => {\r\n  const onSubmit = (formData) => {\r\n    console.log(formData)\r\n  }\r\n    return (\r\n      <div className={classes.music}>\r\n         <MusicReduxForm onSubmit={onSubmit} />\r\n      </div>\r\n    )\r\n}\r\n\r\n\r\nconst MusicForm = (props) => {\r\n  return <form onSubmit={props.handleSubmit} >\r\n    <div>\r\n       <Field name=\"lastName\" component=\"input\" type=\"text\"/>\r\n    </div>\r\n    <div>\r\n        <Field name=\"firstName\" component=\"input\" type=\"text\"/>\r\n    </div>\r\n    <div>\r\n        <Field name=\"email\" component=\"input\" type=\"email\" />\r\n    </div>\r\n    <button type=\"submit\">Submit</button>\r\n  </form>\r\n}\r\n\r\nconst MusicReduxForm = reduxForm({\r\n  form: 'musicForm'\r\n})(MusicForm)\r\n\r\nexport default Music","import { LoginFormDataType } from '../Types/types'\r\nimport {instance, ResponseType, ResultCodeEnum, ResultCodeForCaptchaEnum} from './api'\r\n\r\n\r\ntype AuthResponseType = {\r\n     id: number \r\n     email: string \r\n     login: string \r\n}\r\n\r\ntype LoginResponseType = {\r\n    userId: number   \r\n}\r\n\r\n\r\nexport const authAPI = {\r\n\r\n    authUserData() {\r\n        return instance.get<ResponseType<AuthResponseType>>(`auth/me`).then(res => res.data)\r\n\r\n    },\r\n\r\n    loginUser(formData: LoginFormDataType) {\r\n        return instance.post<ResponseType<LoginResponseType, ResultCodeForCaptchaEnum | ResultCodeEnum>>('/auth/login', {\r\n            email: formData.email,\r\n            password: formData.password,\r\n            rememberMe: formData.rememberMe,\r\n            captcha: formData.captcha\r\n        }).then(res => res.data)\r\n    },\r\n\r\n    logoutUser () {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n\r\n}","import {instance} from './api'\r\n\r\n\r\n\r\ntype SecurityType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaURL () {\r\n        return instance.get<SecurityType>(`security/get-captcha-url`).then(res=> res.data)\r\n    }\r\n}\r\n","import { ResultCodeEnum, ResultCodeForCaptchaEnum } from './../api/api';\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store';\r\nimport { stopSubmit } from 'redux-form';\r\nimport { authAPI } from '../api/auth-api';\r\nimport { securityAPI} from '../api/security-api';\r\nimport { LoginFormDataType } from '../Types/types';\r\n\r\n\r\nconst SET_USER_DATA = 'auth/SET_USER_DATA';\r\nconst SET_LOGIN_USER_ID = 'autn/SET_LOGIN_USER_ID'\r\nconst SET_CAPTCHA_URL = 'SET_CAPTCHA_URL'\r\n\r\nexport type initialStateType = {\r\n  userId: number | null,\r\n  email: string | null,\r\n  login: string | null,\r\n  isAuth: boolean,\r\n  captchaURL: string | null\r\n}\r\n\r\nlet initialState: initialStateType = {\r\n  userId: null,\r\n  email: null,\r\n  login: null,\r\n  isAuth: false,\r\n  captchaURL: null\r\n\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionTypes): initialStateType => {\r\n  switch(action.type) {\r\n    case SET_USER_DATA: \r\n        return {\r\n          ...state,\r\n          ...action.payload\r\n        } \r\n    case SET_LOGIN_USER_ID: \r\n        return {\r\n          ...state,\r\n          userId: action.userId,\r\n        }\r\n    case SET_CAPTCHA_URL: \r\n        return {\r\n          ...state,\r\n          captchaURL: action.captchaURL,\r\n        }              \r\n      default:\r\n        return state;    \r\n  }\r\n}\r\n\r\nexport const actions = {\r\n  setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => {\r\n    return(\r\n      {type: SET_USER_DATA, payload: {userId, email, login, isAuth}} as const\r\n    )\r\n  }, \r\n  setLoginUserId: (userId: number) => {\r\n    return(\r\n      {type: SET_LOGIN_USER_ID, userId} as const\r\n    )\r\n  },\r\n  setCuptchaURL: (captchaURL: string) => {\r\n    return(\r\n      {type: SET_CAPTCHA_URL, captchaURL} as const\r\n    )\r\n  }\r\n}\r\n\r\ntype ActionTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionTypes | ReturnType<typeof stopSubmit>>\r\n\r\nexport const authUserDataThunk = (): ThunkType => async (dispatch) => {\r\n   let meData = await authAPI.authUserData()\r\n    if (meData.resultCode === ResultCodeEnum.Succes) {\r\n      let { id, email, login } = meData.data\r\n      dispatch(actions.setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\n\r\nexport const loginUserThunk = (formData: LoginFormDataType): ThunkType =>{ \r\n  return async (dispatch) => {\r\n    let meData = await authAPI.loginUser(formData)\r\n      if (meData.resultCode === ResultCodeEnum.Succes) {\r\n        dispatch(authUserDataThunk())\r\n      } else {\r\n        if (meData.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\r\n          dispatch(getcaptchaURLThunk())\r\n        }\r\n        const message = meData.messages.length > 0 ? meData.messages : 'some error'\r\n        const action = stopSubmit('login', {_error:message})\r\n        dispatch(action)\r\n      }\r\n   }\r\n  }\r\n\r\nexport const logoutUserThunk = (): ThunkType =>{ \r\n    return async (dispatch) => {\r\n    let response = await authAPI.logoutUser()\r\n        if (response.data.resultCode === ResultCodeEnum.Succes) {\r\n          dispatch(actions.setAuthUserData(null, null, null, false))\r\n        }\r\n     }\r\n    }  \r\n\r\nexport const getcaptchaURLThunk = (): ThunkType =>{ \r\n      return async (dispatch) => {\r\n      let data = await securityAPI.getCaptchaURL()\r\n        const captchaURL = data.url\r\n        dispatch(actions.setCuptchaURL(captchaURL))\r\n       }\r\n      }   \r\n\r\nexport default authReducer","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { required } from '../../utils/validators/validator'\r\nimport { Input } from '../common/FormsControl/FormsControl'\r\nimport { loginUserThunk } from '../../redax/auth-reducer'\r\nimport classes from './../common/FormsControl/formsControl.module.css'\r\nimport {LoginFormDataType} from './../../Types/types'\r\nimport { AppStateType } from '../../redax/redux-store'\r\n\r\ntype LoginFormOwnPropsType = {\r\n    captcha: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormDataType, LoginFormOwnPropsType> & LoginFormOwnPropsType> = (props) => {\r\n\r\n    \r\n    return (\r\n        <form onSubmit={props.handleSubmit} >\r\n            <div>\r\n                <Field placeholder={'Email'} name={'email'} component={Input} validate={[required]} />\r\n            </div>\r\n            <div>\r\n                <Field placeholder={'Password'} name={'password'} component={Input} validate={[required]} type='password' />\r\n            </div>\r\n            <div>\r\n                <Field type={'checkbox'} name={'remembeMe'} component={Input} />\r\n                <span>remember me</span>\r\n            </div>\r\n            {props.captcha && \r\n              <div>\r\n                    <img src={props.captcha} alt='captcha'/>\r\n                    <div>\r\n                      <Field placeholder={'captcha'} name={'captcha'} component={Input} validate={[required]}/>\r\n                    </div>\r\n              </div>\r\n            }\r\n            <div>\r\n                {props.error && <div className={classes.errorLogin}>\r\n                    {props.error}\r\n                </div>}\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormDataType, LoginFormOwnPropsType>({\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\n\r\nconst Login: React.FC = () => {\r\n   \r\n    \r\n    const captchaURL = useSelector((state:AppStateType) => state.auth.captchaURL)\r\n    const isAuth = useSelector((state:AppStateType) => state.auth.isAuth)\r\n\r\n    const dispatch = useDispatch()\r\n   \r\n    \r\n    const onSubmit = (formData: LoginFormDataType) => {\r\n        dispatch(loginUserThunk(formData))\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'/Profile'} />\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captcha={captchaURL}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login","const SET_CHOISE_SUMM = 'SET_CHOISE_SUMM'\r\n\r\n\r\nconst initialState = {\r\n  choiseSumm: ''\r\n}\r\n\r\n\r\nconst settingReducer = (state = initialState, action) => {\r\n   switch(action.type) {\r\n    case SET_CHOISE_SUMM:\r\n      return {\r\n        ...state,\r\n        choiseSumm: action.summ\r\n      }\r\n      default:\r\n        return state;\r\n   }\r\n}\r\n\r\n\r\nexport const setSummAC = (summ) => {\r\n  return (\r\n    {\r\n      type: SET_CHOISE_SUMM,\r\n      summ\r\n    }\r\n  )\r\n}\r\n\r\n\r\nexport default settingReducer","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classes from './Settings.module.css';\r\nimport {setSummAC} from '../../redax/settingPage-reducer'\r\n\r\n\r\nconst Settings = (props) => {\r\n\r\nconst [currentValue, onChengeCurrentValue] = useState(0)\r\n\r\nconst onChengeValue = (e) => {\r\n  onChengeCurrentValue(e.currentTarget.value)\r\n}\r\n\r\n    return (\r\n      <div className={classes.settings}>\r\n        <h1>Your Choise: <span>{props.summ}</span></h1>\r\n        <div>Current summ value: <span>{currentValue}</span></div> \r\n        <input type=\"range\" min='0' max='100' value={currentValue} onChange={onChengeValue} />\r\n        <button onClick={ (e) => {\r\n          props.setSummAC(currentValue)\r\n        } }>Confirm</button>\r\n        <button onClick={ () => {\r\n          props.setSummAC(0)\r\n        } }>Clear</button>\r\n      </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    summ: state.setting.choiseSumm\r\n  }\r\n}\r\n\r\n\r\nexport default connect (mapStateToProps, { setSummAC }) (Settings)","import {  photosType, userProfileType } from '../Types/types'\r\nimport { instance, ResponseType } from './api'\r\n\r\ntype SavePhotoResponseDataTYpe = {\r\n    photos: photosType\r\n}\r\nexport const profileAPI = {\r\n\r\n    getUserProfile(UserId: number | null) {\r\n        return instance.get<userProfileType>(`profile/${UserId}`).then(res => res.data)\r\n    },\r\n\r\n    getStatus(UserId: number) {\r\n        return instance.get<string>('profile/status/' + UserId).then(res => res.data)\r\n    },\r\n\r\n    updateStatus(status: string) {\r\n        return instance.put<ResponseType>('profile/status', {\r\n            status: status\r\n        }).then(res=> res.data)\r\n    },\r\n\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData();\r\n        formData.append('image', photoFile)\r\n        return instance.put<ResponseType<SavePhotoResponseDataTYpe>>('profile/photo', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res=> res.data)\r\n    },\r\n\r\n    saveProfile(formData: userProfileType) {\r\n        return instance.put<ResponseType>('profile', \r\n            formData \r\n        ).then(res=> res.data)\r\n    }\r\n}\r\n\r\n\r\n\r\n","import { BaseThunkType, InferActionsTypes } from './redux-store';\r\nimport { stopSubmit } from 'redux-form';\r\nimport { profileAPI } from '../api/profile-api';\r\nimport { photosType, postsDataType, userProfileType } from '../Types/types';\r\n\r\n\r\nexport type initialContentStateType = typeof initialState\r\n\r\nlet initialState = {\r\n  postsData: [{\r\n    id: 1,\r\n    message: 'Hi, bro..,',\r\n    likeNumb: 32,\r\n    avaLink: 'https://i.pinimg.com/170x/a1/9b/83/a19b83023cdb650a17623bf6bf456245.jpg'\r\n  },\r\n  {\r\n    id: 2,\r\n    message: 'Hello world!',\r\n    likeNumb: 20,\r\n    avaLink: 'https://i.pinimg.com/170x/a1/9b/83/a19b83023cdb650a17623bf6bf456245.jpg'\r\n  },\r\n  ] as Array<postsDataType>,\r\n  userProfile: null as userProfileType | null,\r\n  status: '' as string\r\n\r\n}\r\n\r\nconst contentPageReducer = (state = initialState, action: ActionTypes): initialContentStateType => {\r\n  switch (action.type) {\r\n    case 'SN/PROFILE/ADD-POST': {\r\n      let newPost = {\r\n        id: 5,\r\n        message: action.postMessage,\r\n        likeNumb: 0,\r\n        avaLink: 'https://i.pinimg.com/170x/a1/9b/83/a19b83023cdb650a17623bf6bf456245.jpg'\r\n      };\r\n      return {\r\n        ...state,\r\n        postsData: [...state.postsData, newPost]\r\n      };\r\n    }\r\n    case 'SN/PROFILE/SET_USER_PROFILE':\r\n      return {\r\n        ...state,\r\n        userProfile: action.userProfile\r\n      }\r\n    case 'SN/PROFILE/SET_STATUS':\r\n      return {\r\n        ...state,\r\n        status: action.status\r\n      }\r\n    case 'SN/PROFILE/SAVE_PHOTO_SUCCES':\r\n      return {\r\n        ...state,\r\n        userProfile: { ...state.userProfile, photos: action.photos } as userProfileType\r\n      }\r\n    case 'SN/PROFILE/DELETE_POST':\r\n      return {...state, postsData: state.postsData.filter(p => p.id !== action.postId)}  \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n\r\nexport const actions = {\r\n  addPostActionCreater: (postMessage: string) => {\r\n    return ({\r\n      type: 'SN/PROFILE/ADD-POST', postMessage\r\n    }as const)\r\n  },\r\n  setUserProfile: (userProfile: userProfileType) => {\r\n    return ({\r\n      type: 'SN/PROFILE/SET_USER_PROFILE',\r\n      userProfile\r\n    } as const)\r\n  },\r\n  setUserStatus: (status: string) => {\r\n    return ({\r\n      type: 'SN/PROFILE/SET_STATUS',\r\n      status\r\n    } as const)\r\n  },\r\n  savePhotoSucces: (photos: photosType) => {\r\n    return ({\r\n      type: 'SN/PROFILE/SAVE_PHOTO_SUCCES',\r\n      photos\r\n    } as const)\r\n  },\r\n  delitePost: (postId: number) => {\r\n    return ({\r\n      type: 'SN/PROFILE/DELETE_POST',\r\n      postId\r\n    } as const)\r\n  }, \r\n}\r\ntype ActionTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionTypes | ReturnType<typeof stopSubmit>>//stopSubmit returned FormAction\r\n\r\nexport const getUserProfileThunk = (userId: number | null): ThunkType => async (dispatch) => {\r\n  await profileAPI.getUserProfile(userId).then((data) => {\r\n      dispatch(actions.setUserProfile(data))\r\n    });\r\n  }\r\n\r\nexport const getStatusThunk = (userId: number): ThunkType => async (dispatch) => {\r\n  await profileAPI.getStatus(userId).then((data) => {\r\n      dispatch(actions.setUserStatus(data))\r\n    });\r\n  }\r\n\r\nexport const updateStatusThunk = (status: string): ThunkType => async (dispatch) => {\r\n   await profileAPI.updateStatus(status).then((data) => {\r\n      if (data.resultCode === 0) {\r\n        dispatch(actions.setUserStatus(status))\r\n      }\r\n    });\r\n  }\r\n\r\nexport const savePhotoThunk = (photo: File): ThunkType => async (dispatch) => {\r\n   await profileAPI.savePhoto(photo).then((data) => {\r\n      if (data.resultCode === 0) {\r\n        dispatch(actions.savePhotoSucces(data.data.photos))\r\n      }\r\n    });\r\n  }\r\n\r\nexport const setFormDataThunk = (formData: userProfileType): ThunkType => async (dispatch, getState) => {\r\n  const userId = getState().auth.userId;\r\n  const data = await profileAPI.saveProfile(formData)\r\n  if (data.resultCode === 0) {\r\n    dispatch(getUserProfileThunk(userId))\r\n  } else {\r\n    dispatch(stopSubmit('ProfileData', { _error: data.messages[0] }))\r\n    return Promise.reject(data.messages[0]);\r\n  }\r\n}\r\n\r\n\r\nexport default contentPageReducer","import React from 'react';\r\nimport classes from './Post.module.css';\r\n\r\ntype  propsPostType = {\r\n    message: string\r\n    key: number\r\n    likenumb: number\r\n    avalink: string\r\n}\r\n\r\nconst Post: React.FC<propsPostType> = (props) => {\r\n    return (\r\n        <div className={classes.post}>\r\n            <img alt='ava' src={props.avalink}/>\r\n            {props.message}\r\n            <div>Like\r\n                <span>  </span>   \r\n                <span>{props.likenumb}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import React from 'react';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport classes from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {required, maxLengthCreator} from '../../../utils/validators/validator'\r\nimport {Textarea} from '../../common/FormsControl/FormsControl'\r\nimport { contentPageType } from '../../../Types/types';\r\n\r\ntype propsMyPostsType = {\r\n  contentPage: contentPageType\r\n  addPostAction: (postMessage: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<propsMyPostsType> = (props) => {\r\n\r\n  let postsElem = props.contentPage.postsData.map((post) => {\r\n    return (\r\n      <Post message={post.message} key={post.id} likenumb={post.likeNumb} avalink={post.avaLink} />\r\n    );\r\n  });\r\n\r\n  const onSubmit = (formData: addPostMessageForm) =>{\r\n    props.addPostAction(formData.postMessage);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.posts}>My posts\r\n    <PostReduxForm onSubmit={onSubmit} />\r\n      {postsElem}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nconst maxLength30 = maxLengthCreator(30);\r\n\r\ntype propsType = { }\r\n\r\ntype addPostMessageForm = {\r\n  postMessage: string\r\n}\r\n\r\nconst PostForm: React.FC<InjectedFormProps<addPostMessageForm, propsType> & propsType>= (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit} >\r\n        <div>\r\n          <Field name={'postMessage'} component={Textarea} placeholder={'write here'} validate={[required, maxLength30]}></Field>\r\n        </div>\r\n        <button>add post</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst PostReduxForm = reduxForm<addPostMessageForm, propsType> ({\r\n  form: 'posts'\r\n}) (PostForm)\r\n\r\nexport default MyPosts","\r\nimport { connect } from 'react-redux';\r\nimport {actions} from '../../../redax/contentPage-reducer'\r\nimport { AppStateType } from '../../../redax/redux-store';\r\nimport { contentPageType } from '../../../Types/types';\r\nimport MyPosts from './Myposts'\r\n\r\n\r\ntype MapStateToPropsType = {\r\n  contentPage: contentPageType\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n  return {\r\n    contentPage: state.contentPage\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return{\r\n    addPostAction: (postMessage: string) =>{\r\n      dispatch(actions.addPostActionCreater(postMessage))\r\n    }\r\n  }\r\n}\r\n\r\nconst MypostsContainer = connect(mapStateToProps, mapDispatchToProps) (MyPosts);\r\n\r\nexport default MypostsContainer","import React, { ChangeEvent, useEffect, useState } from 'react';\r\n\r\ntype PropsType = {\r\n  updateStatusThunk: (status: string) => void\r\n  status: string\r\n}\r\n\r\n\r\n\r\n\r\nconst ProfileStatus = (props: PropsType) => {\r\n\r\n  const [editMode, setEditMode] = useState(false)\r\n  const [status, setStatus] = useState(props.status);\r\n\r\n\r\n  const activatedEditMode = () => {\r\n    setEditMode(true)\r\n  }\r\n\r\n  const deactivatedEditMode = () => {\r\n    setEditMode(false)\r\n    props.updateStatusThunk(status);\r\n  }\r\n\r\n  const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setStatus(e.currentTarget.value)\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status)\r\n  },[props.status]);\r\n\r\n\r\n  return (\r\n    <div>\r\n      {!editMode &&\r\n        <div>\r\n          <span onDoubleClick={activatedEditMode}>{props.status ? props.status : 'Not status'}</span>\r\n        </div>\r\n      }\r\n      {editMode &&\r\n        <div>\r\n          <input autoFocus={true} onChange={onChangeStatus} onBlur={deactivatedEditMode} value={status} />\r\n        </div>\r\n      }\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProfileStatus","import React from 'react';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { Input, Textarea } from '../../common/FormsControl/FormsControl'\r\nimport classes from './ProfileInfo.module.css';\r\nimport style from './../../common/FormsControl/formsControl.module.css'\r\nimport {  userProfileType } from '../../../Types/types';\r\n\r\n\r\ntype ProfileDataFormOwnPropsType = {\r\n    profile: userProfileType\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<userProfileType, ProfileDataFormOwnPropsType> & ProfileDataFormOwnPropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} >\r\n            {props.error && <div className={style.errorLogin}>\r\n                {props.error}\r\n            </div>}\r\n            <div>\r\n                <b>Full name:</b><Field placeholder={'Full name'} name={'fullName'} component={Input} />\r\n            </div>\r\n            <div>\r\n                <b>About me:</b><Field placeholder={'About me'} name={'aboutMe'} component={Input} type='text' />\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job:</b><Field type={'checkbox'} name={'lookingForAJob'} component={Input} />\r\n            </div>\r\n            <div>\r\n                <b>Skills:</b><Field placeholder={'skils'} name={'lookingForAJobDescription'} component={Textarea} type='text' />\r\n            </div>\r\n            <div> Contacts:{Object.keys(props.profile.contacts).map(key => {\r\n                return <div className={classes.contacts} key={key}> \r\n                {key} \r\n                <Field placeholder={key} name={'contacts.' + key} component={Input} />\r\n                </div>\r\n            })}\r\n            </div>\r\n\r\n            <div>\r\n                <button>Save</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst ProfileDataReduxForm = reduxForm<userProfileType, ProfileDataFormOwnPropsType>({\r\n    form: 'ProfileData'\r\n})(ProfileDataForm)\r\n\r\nexport default ProfileDataReduxForm","import React, { ChangeEvent, useState } from 'react';\r\nimport Preloader from '../../common/preloader/preloader';\r\nimport classes from './ProfileInfo.module.css';\r\nimport userPhotoDefault from './../../../assets/images/users.png'\r\nimport ProfileStatus from './ProfileStatus'\r\nimport ProfileDataForm from './ProfileDataForm';\r\nimport { contactsType, userProfileType } from '../../../Types/types';\r\n\r\n\r\ntype PropsType = {\r\n  profile: userProfileType | null\r\n  savePhotoThunk: (photo: File) => void\r\n  setFormDataThunk: (formData: userProfileType) => Promise<any>\r\n  updateStatusThunk: (status: string) => void\r\n  status: string\r\n  isOwner: boolean\r\n\r\n}\r\nconst ProfileInfo: React.FC <PropsType> = (props) => {\r\n\r\n  const [editMode, setEditMode] = useState(false)\r\n\r\n  if (!props.profile) {\r\n    return <Preloader />\r\n  }\r\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>): void => {\r\n   \r\n    if (e.target.files?.length) {\r\n      props.savePhotoThunk(e.target.files[0])\r\n    }\r\n  }\r\n\r\n  const onSubmit = (formData: any) => {\r\n     props.setFormDataThunk(formData).then(\r\n      () => {\r\n        setEditMode(false)\r\n       }\r\n     )\r\n  }\r\n  \r\n  \r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <img className={classes.avatar} alt='ava' src={props.profile.photos.large != null ? props.profile.photos.large : userPhotoDefault} />\r\n        <h3>{props.profile.fullName}</h3>\r\n        <ProfileStatus status={props.status} updateStatusThunk={props.updateStatusThunk} />\r\n        <div className={classes.clear}></div>\r\n        {props.isOwner && <input type='file' onChange={onMainPhotoSelected} />}\r\n        { editMode \r\n            ? <ProfileDataForm onSubmit={onSubmit} profile={props.profile}/> \r\n            : <ProfileData profile={props.profile} \r\n                           isOwner={props.isOwner} \r\n                           goToEditMode={()=> {\r\n                                setEditMode(true)\r\n        }} />}\r\n        \r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\ntype ContactPropsType = {\r\n  contactTitle: string\r\n  contactValue: string\r\n}\r\n\r\nconst Contact: React.FC <ContactPropsType> = ({ contactTitle, contactValue }) => {\r\n  return <div>{contactTitle} : {contactValue}</div>\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n  profile: userProfileType\r\n  isOwner: boolean\r\n  goToEditMode: () => void\r\n}\r\nconst ProfileData: React.FC <ProfileDataPropsType> = (props) => {\r\n  return (\r\n    <div>\r\n      {props.isOwner && <div><button onClick={ ()=> {props.goToEditMode()} } >edit</button></div>}\r\n      <div>{props.profile.aboutMe}</div>\r\n      <div>нужна работа: {props.profile.lookingForAJob ? 'Yes' : 'No'} </div>\r\n      {props.profile.lookingForAJob && <div>Навыки: {props.profile.lookingForAJobDescription} </div>}\r\n      <div className={classes.contacts}> Contacts:{Object.keys(props.profile.contacts).map(key => {\r\n        return <Contact contactTitle={key}\r\n          contactValue={props.profile.contacts[key as keyof contactsType]}\r\n          key={key} />\r\n      })}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default ProfileInfo","import React from 'react';\r\nimport { userProfileType } from '../../Types/types';\r\nimport classes from './Content.module.css';\r\nimport MypostsContainer from './MyPosts/MypostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\n\r\ntype propsContentType = {\r\n    profile: userProfileType | null\r\n    savePhotoThunk: (photo: File) => void\r\n    setFormDataThunk: (formData: userProfileType) => Promise<any>\r\n    updateStatusThunk: (status: string) => void\r\n    status: string\r\n    isOwner: boolean\r\n}\r\n\r\nconst Content: React.FC<propsContentType> = (props) => {\r\n    return (\r\n      <div className={classes.content}>\r\n          <div>\r\n              <img alt='decorate' src='https://apod.nasa.gov/apod/image/2008/PerseidBridge_Zhang_4032.jpg'/>\r\n          </div>\r\n         <ProfileInfo profile={props.profile} status={props.status} \r\n         updateStatusThunk={props.updateStatusThunk} isOwner={props.isOwner} savePhotoThunk={props.savePhotoThunk}\r\n         setFormDataThunk={props.setFormDataThunk}/>\r\n         <MypostsContainer/>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Content","import { AppStateType } from '../../redax/redux-store';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Content from './Content';\r\nimport { getUserProfileThunk, getStatusThunk, updateStatusThunk, savePhotoThunk, setFormDataThunk } from '../../redax/contentPage-reducer'\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { withAuthRedirect } from '../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { userProfileType } from '../../Types/types';\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    getUserProfileThunk: (userId: number) => void\r\n    getStatusThunk: (userId: number) => void\r\n    updateStatusThunk: (status: string) => void\r\n    savePhotoThunk: (photo: File) => void\r\n    setFormDataThunk: (formData: userProfileType) => Promise<any>\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile () {\r\n        let userId: number | null = +this.props.match.params.userId; \r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n        }  if (!userId) {\r\n            this.props.history.push('/login');\r\n        }\r\n    \r\n        this.props.getUserProfileThunk(userId as number)\r\n        this.props.getStatusThunk(userId as number)\r\n\r\n    }\r\n   componentDidMount () {\r\n    this.refreshProfile()\r\n   }\r\n\r\n   componentDidUpdate (prevProps: PropsType, prevState: PropsType) {\r\n       if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n        this.refreshProfile()\r\n       }\r\n   }\r\n \r\n   render () {\r\n       return (\r\n        <Content {...this.props} \r\n        profile={this.props.profile} \r\n        isOwner={!this.props.match.params.userId}/>\r\n       )\r\n   }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) =>{\r\n    return {\r\n        profile: state.contentPage.userProfile,\r\n        status: state.contentPage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nconst ProfileContainerConnect = compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfileThunk,getStatusThunk, updateStatusThunk, savePhotoThunk, setFormDataThunk}),\r\n    withRouter,\r\n    withAuthRedirect\r\n) (ProfileContainer)\r\n\r\n\r\nexport default ProfileContainerConnect\r\n\r\n","import { authUserDataThunk } from \"./auth-reducer\";\r\nimport { BaseThunkType } from \"./redux-store\";\r\n\r\nconst INITIALIZED_SUCCESS = 'SN/APP/INITIALIZED_SUCCESS';\r\n\r\n\r\n\r\n\r\n\r\nlet initialState = {\r\n  inizialized: false,\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\n\r\nconst appReducer = (state = initialState, action: ActionTypes): initialStateType => {\r\n  switch(action.type) {\r\n    case INITIALIZED_SUCCESS: \r\n        return {\r\n          ...state,\r\n          inizialized: true\r\n        }        \r\n      default:\r\n        return state;    \r\n  }\r\n}\r\ntype ActionTypes = initializedSuccesActionType\r\ntype ThunkType = BaseThunkType<ActionTypes>\r\n\r\ntype initializedSuccesActionType = {\r\n  type: typeof INITIALIZED_SUCCESS\r\n}\r\n\r\nexport const initializedSucces = (): initializedSuccesActionType => {\r\n  return(\r\n    {type: INITIALIZED_SUCCESS}\r\n  )\r\n} \r\n\r\n\r\nexport const initializeAppThunk = (): ThunkType => async (dispatch) => { \r\n  await dispatch(authUserDataThunk()).then( () => {\r\n    dispatch(initializedSucces());\r\n  })\r\n}\r\n\r\n\r\n\r\nexport default appReducer","import React from 'react'\r\nimport Preloader from '../common/preloader/preloader'\r\n\r\nexport default function withSuspense <WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n  \r\n    return (props: WCP) => {\r\n        return <React.Suspense fallback={<Preloader/>}>\r\n                <WrappedComponent {...props}/>\r\n            </React.Suspense>\r\n\r\n    }\r\n}\r\n","import React, { useState } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport classes from './Header.module.css';\r\nimport { Col, Row, Layout, Button } from 'antd';\r\nimport {\r\n  MenuUnfoldOutlined,\r\n  MenuFoldOutlined,\r\n  UserOutlined,\r\n} from '@ant-design/icons';\r\nimport Avatar from 'antd/lib/avatar/avatar';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getIsAuth, getLogin } from '../../redax/selectors';\r\nimport { logoutUserThunk } from '../../redax/auth-reducer';\r\n\r\n\r\nexport type PropsHeaderType = {\r\n  toggle: () => void\r\n}\r\n\r\n\r\nexport const Header: React.FC<PropsHeaderType> = (props) => {\r\n  const { Header } = Layout;\r\n\r\n  const [collapsed, setCollapsed] = useState(true)\r\n  const isAuth = useSelector(getIsAuth)\r\n  const login = useSelector(getLogin)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const logoutCallback = () => {\r\n    dispatch(logoutUserThunk())\r\n  }\r\n\r\n\r\n  const toggle = () => {\r\n    setCollapsed(!collapsed)\r\n    props.toggle()\r\n  }\r\n\r\n  return (\r\n    <Header className=\"site-layout-background\" style={{ padding: 0 }}>\r\n      <Row>\r\n        <Col span={16}>\r\n          {React.createElement(collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\r\n            className: 'trigger',\r\n            style: { fontSize: '28px', color: 'white', marginLeft: '35px' },\r\n            onClick: toggle,\r\n          })}\r\n        </Col>\r\n\r\n        {isAuth ?\r\n          <>\r\n            <Col span={1}>\r\n              <Avatar style={{ backgroundColor: '#87d068' }} icon={<UserOutlined />} />\r\n            </Col>\r\n            <Col span={7}>\r\n                <span style={{color: \"white\", margin: '10px'}} >{login}</span><Button onClick={logoutCallback}>Log Out</Button>\r\n            </Col>\r\n\r\n          </>\r\n          : <Col span={6}> <NavLink to='/login'>Login</NavLink> </Col>}\r\n\r\n      </Row>\r\n    </Header>\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /* <header className={classes.header}>\r\n        <img alt=\"header\" src='https://upload.wikimedia.org/wikipedia/commons/thumb/e/e5/NASA_logo.svg/200px-NASA_logo.svg.png'/>\r\n        <div className={classes.login}>\r\n        {props.isAuth ? \r\n        <div>{props.login} -<button onClick={props.logoutUserThunk}>Log Out</button></div> :\r\n         <NavLink to='/login'>Login</NavLink>}\r\n          </div>  \r\n    </header> */\r\n  )\r\n}\r\n","import './App.css';\nimport React from 'react';\nimport Nav from './components/Nav/Nav';\nimport DialogsContainer from './components/Dialogs/DialogsContainer';\nimport ContainerNews from './components/News/conteinerNews';\nimport Music from './components/Music/Music';\nimport Login from './components/Login/Login';\nimport Settings from './components/Settings/Settings';\nimport { Link, NavLink, Redirect, Route, Switch, withRouter } from 'react-router-dom';\nimport ProfileContainerConnect from './components/Content/ProfileContainer'\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { initializeAppThunk } from './redax/app-reducer';\nimport Preloader from './components/common/preloader/preloader';\nimport withSuspense from './components/hoc/withSuspense';\nimport { AppStateType } from './redax/redux-store';\nimport 'antd/dist/antd.css'\n\nimport {Layout, Menu} from 'antd';\nimport {\n  UserOutlined,\n  MessageOutlined,\n  TeamOutlined,\n} from '@ant-design/icons';\nimport { Header } from './components/Header/Header';\n\nconst {  Sider, Content } = Layout;\n\nconst UsersPage = React.lazy(() => import('./components/Users/UsersPage'));\nconst ChatPage = React.lazy(() => import('./Pages/Chat/ChatPage'));\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n  initializeAppThunk: () => void\n}\n\ntype MyState = { collapsed: boolean };\n\nconst SuspendedDialogs = withSuspense(UsersPage);\nconst SuspendedChat = withSuspense(ChatPage);\n\nclass App extends React.Component<MapPropsType & DispatchPropsType, MyState>{\n\n  constructor(props: MapPropsType & DispatchPropsType) {\n    super(props);\n    this.state = { collapsed: false };\n\n  }\n\n\n  toggle = () => {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  };\n\n  componentDidMount() {\n    this.props.initializeAppThunk()\n  }\n\n\n  render() {\n    if (!this.props.initialized) {\n      return <Preloader />\n    }\n    return (\n      <Layout >\n        <Sider trigger={null} collapsible collapsed={this.state.collapsed} collapsedWidth={80}>\n          <div className=\"logo\" />\n          <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\n            <Menu.Item key=\"1\" icon={<UserOutlined />}>\n              <NavLink to='/profile'>Profile</NavLink>\n            </Menu.Item>\n            <Menu.Item key=\"2\" icon={<MessageOutlined />}>\n              <NavLink to='/dialogs'>Messages</NavLink>\n            </Menu.Item>\n            <Menu.Item key=\"3\" icon={<TeamOutlined />}>\n              <NavLink to='/users'>Find Friends</NavLink>\n            </Menu.Item>\n            <Menu.Item key=\"4\" icon={<TeamOutlined />}>\n              <Link to='/chat'>Chat</Link>\n            </Menu.Item>\n          </Menu>\n        </Sider>\n        <Layout className=\"site-layout\">\n\n          <Header toggle={this.toggle}/>\n          <Content\n            className=\"site-layout-background\"\n            style={{\n              margin: '24px 16px',\n              padding: 24,\n              minHeight: 280,\n            }}\n          >\n            <Switch>\n              <Route exact path=\"/\" render={() => <Redirect to={'/profile'} />} />\n              <Route path=\"/profile/:userId?\" render={() => <ProfileContainerConnect />} />\n              <Route path=\"/dialogs\" render={() => <DialogsContainer />} />\n              <Route path=\"/news\" render={() => <ContainerNews />} />\n              <Route path=\"/music\" render={() => <Music />} />\n              <Route path=\"/settings\" render={() => <Settings />} />\n              <Route path=\"/users\" render={() => <SuspendedDialogs />} />\n              <Route path=\"/login\" render={() => <Login />} />\n              <Route path=\"/chat\" render={() => <SuspendedChat />} />\n              <Route path=\"*\" render={() => <div>404 NOT FOUND</div>} />\n            </Switch>\n          </Content>\n        </Layout>\n      </Layout>\n      \n\n\n\n\n      /*  <div className=\"app-wrapper\">\n         <HeaderContainer/>\n         <Nav bestFriends={this.props.bestFriends}/>\n         <div className='app-wrapper-content'>\n           <Switch>\n             <Route exact path=\"/\" render={ () => <Redirect to={'/profile'}/> }/>\n             <Route path=\"/profile/:userId?\" render={ () => <ProfileContainerConnect/>}/>\n             <Route path=\"/dialogs\" render={ () => <DialogsContainer/>}/> \n             <Route path=\"/news\" render={ () => <ContainerNews/>}/>\n             <Route path=\"/music\" render={ () => <Music/>}/> \n             <Route path=\"/settings\" render={ () => <Settings/>}/> \n             <Route path=\"/users\" render={()=> <SuspendedDialogs/> }/> \n             <Route path=\"/login\" render={ () => <Login/>}/>\n             <Route path=\"*\" render={ () => <div>404 NOT FOUND</div>}/>\n           </Switch> \n         </div>\n       </div> */\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n  initialized: state.app.inizialized,\n  bestFriends: state.bestFriends\n})\n\nexport default compose<React.ComponentType>(\n  connect(mapStateToProps, { initializeAppThunk }),\n  withRouter)(App)\n","\r\n\r\nlet initialState = {\r\n    bestFriends: [\r\n        {id: 1, name: 'Dimych', dialogAvaLink:'https://i.pinimg.com/236x/54/13/e2/5413e250d1eecb821fc49c3213d7d661--search.jpg'},\r\n        {id: 2, name: 'Masha', dialogAvaLink:'https://bipbap.ru/wp-content/uploads/2018/02/1378847521_1806552374.jpg'},\r\n        {id: 3, name: 'Sveta', dialogAvaLink:'https://sun9-17.userapi.com/impf/4WuzlR38g8VZ7SDAE26PZMvN8ymWBgFKfvnJcg/mh2Zr1zacro.jpg?size=200x0&quality=90&crop=22,0,560,580&sign=ce0a6e9cd38861cbf30a89d01eb50ce1&ava=1'},]\r\n    }\r\n\r\nconst bestFriendsReducer = (state = initialState, action) => {\r\n    \r\n    return state;\r\n}\r\n\r\nexport default bestFriendsReducer ","import {applyMiddleware, combineReducers, createStore, compose, Action} from 'redux';\r\nimport contentPageReducer from './contentPage-reducer'\r\nimport messagePageReducer from './messagePage-reducer'\r\nimport bestFriendsReducer from './bestFriends-reducer'\r\nimport userPageReducer from './users-reducer'\r\nimport newsPageReducer from './news-reducer'\r\nimport authReducer from './auth-reducer'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from './app-reducer';\r\nimport settingReducer from './settingPage-reducer';\r\nimport { ThunkAction } from 'redux-thunk';\r\n\r\n\r\nlet reducers = combineReducers({\r\n    contentPage:contentPageReducer,\r\n    messagesPage:messagePageReducer,\r\n    bestFriends:bestFriendsReducer,\r\n    usersPage:userPageReducer,\r\n    newsPage:newsPageReducer,\r\n    auth:authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n    setting: settingReducer\r\n});\r\n\r\ntype RootreducerType = typeof reducers;\r\nexport type AppStateType = ReturnType<RootreducerType>\r\n\r\ntype PropertyTypes<T> = T extends {[key: string]: infer U} ? U : never\r\nexport type InferActionsTypes<T extends {[key: string]: (...args: any[])=> any}> = ReturnType<PropertyTypes<T>>\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>>= ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\n/* let store = createStore(reducers, applyMiddleware(thunkMiddleware)); */\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\nimport App from './App';\nimport store from './redax/redux-store';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux'\n\nlet rerenderEntireTree = () =>{\n    ReactDOM.render(\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n          <Provider store={store}>\n                <App />\n          </Provider>\n      </BrowserRouter>,\n      document.getElementById('root')\n    );\n    }\n\n    rerenderEntireTree();\n    \n    store.subscribe(() => {\n      rerenderEntireTree()\n    });\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"formsControl_formControl__2nT8T\",\"error\":\"formsControl_error__1bztn\",\"errorLogin\":\"formsControl_errorLogin__3Sxj2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__13O1d\",\"dialogItems\":\"Dialogs_dialogItems__1bvhd\",\"dialog\":\"Dialogs_dialog__2XPZq\",\"messagesBlock\":\"Dialogs_messagesBlock__3VQKH\",\"message\":\"Dialogs_message__3AsAi\"};","import React from 'react'\r\nimport classes from './preloader.module.css'\r\n\r\n\r\n\r\n\r\n\r\nconst Preloader: React.FC = () =>{\r\n    return (\r\n       <div className={classes.wrapperSpin}><div className={classes.ldsRipple}><div></div><div></div></div></div>\r\n    )\r\n}\r\n\r\n\r\nexport default Preloader","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__DyR0c\",\"avatar\":\"ProfileInfo_avatar__14i1w\",\"clear\":\"ProfileInfo_clear__2K0gG\",\"contacts\":\"ProfileInfo_contacts__3q13R\"};"],"sourceRoot":""}